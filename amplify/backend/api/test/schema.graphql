type Item @model @searchable {
  id: ID!
  title: String!
  description: String
  image: String
  price: Float!
  orders: [ItemOrder] @connection(keyName: "byItem", fields: ["id"])
}

type ItemOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byItem", fields: ["item_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "item_id"]) {
  id: ID!
  item_id: ID!
  order_id: ID!
  item: Item @connection(fields: ["item_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  items: [ItemOrder] @connection(keyName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}